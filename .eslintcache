[{"/Users/ruixue0702/team/vite-project/src/App.vue":"1","/Users/ruixue0702/team/vite-project/src/components/Test.tsx":"2","/Users/ruixue0702/team/vite-project/docs/components/docs.d.ts":"3","/Users/ruixue0702/team/vite-project/docs/vite.config.ts":"4","/Users/ruixue0702/team/vite-project/src/components/HelloWorld.vue":"5"},{"size":629,"mtime":1656147585793},{"size":41,"mtime":1656147963759,"results":"6","hashOfConfig":"7"},{"size":507,"mtime":1656158077287,"results":"8","hashOfConfig":"7"},{"size":168,"mtime":1656169311450,"results":"9","hashOfConfig":"7"},{"size":356,"mtime":1656156501015,"results":"10","hashOfConfig":"7"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nrhk16",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ruixue0702/team/vite-project/src/components/Test.tsx",[],[],"/Users/ruixue0702/team/vite-project/docs/components/docs.d.ts",[],["23","24","25"],"/Users/ruixue0702/team/vite-project/docs/vite.config.ts",[],[],"/Users/ruixue0702/team/vite-project/src/components/HelloWorld.vue",["26"],[],{"ruleId":"27","severity":2,"message":"28","line":14,"column":36,"nodeType":"29","messageId":"30","endLine":14,"endColumn":38,"suppressions":"31"},{"ruleId":"27","severity":2,"message":"28","line":14,"column":40,"nodeType":"29","messageId":"30","endLine":14,"endColumn":42,"suppressions":"32"},{"ruleId":"33","severity":1,"message":"34","line":14,"column":44,"nodeType":"35","messageId":"36","endLine":14,"endColumn":47,"suggestions":"37","suppressions":"38"},{"ruleId":"39","severity":1,"message":"40","line":6,"column":7,"nodeType":"41","messageId":"42","endLine":6,"endColumn":12},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["43"],["44"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["45","46"],["47"],"@typescript-eslint/no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar",{"kind":"48","justification":"49"},{"kind":"48","justification":"49"},{"messageId":"50","fix":"51","desc":"52"},{"messageId":"53","fix":"54","desc":"55"},{"kind":"48","justification":"49"},"directive","","suggestUnknown",{"range":"56","text":"57"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"56","text":"58"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[473,476],"unknown","never"]