[{"/Users/ruixue0702/team/vite-project/src/App.vue":"1","/Users/ruixue0702/team/vite-project/src/components/Test.tsx":"2","/Users/ruixue0702/team/vite-project/docs/vite.config.ts":"3","/Users/ruixue0702/team/vite-project/src/components/HelloWorld.vue":"4","/Users/ruixue0702/team/vite-project/docs/docs.d.ts":"5","/Users/ruixue0702/team/vite-project/postcss.config.js":"6","/Users/ruixue0702/team/vite-project/tailwind.config.js":"7"},{"size":629,"mtime":1656147585793},{"size":41,"mtime":1656147963759,"results":"8","hashOfConfig":"9"},{"size":168,"mtime":1656169311450,"results":"10","hashOfConfig":"9"},{"size":357,"mtime":1656172816685,"results":"11","hashOfConfig":"9"},{"size":507,"mtime":1656158077287,"results":"12","hashOfConfig":"9"},{"size":82,"mtime":1656202463906},{"size":127,"mtime":1656202463906},{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nrhk16",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ruixue0702/team/vite-project/src/components/Test.tsx",[],[],"/Users/ruixue0702/team/vite-project/docs/vite.config.ts",[],[],"/Users/ruixue0702/team/vite-project/src/components/HelloWorld.vue",["25"],[],"/Users/ruixue0702/team/vite-project/docs/docs.d.ts",[],["26","27","28"],{"ruleId":"29","severity":1,"message":"30","line":6,"column":7,"nodeType":"31","messageId":"32","endLine":6,"endColumn":12},{"ruleId":"33","severity":2,"message":"34","line":14,"column":36,"nodeType":"35","messageId":"36","endLine":14,"endColumn":38,"suppressions":"37"},{"ruleId":"33","severity":2,"message":"34","line":14,"column":40,"nodeType":"35","messageId":"36","endLine":14,"endColumn":42,"suppressions":"38"},{"ruleId":"39","severity":1,"message":"40","line":14,"column":44,"nodeType":"41","messageId":"42","endLine":14,"endColumn":47,"suggestions":"43","suppressions":"44"},"@typescript-eslint/no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["45"],["46"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["47","48"],["49"],{"kind":"50","justification":"51"},{"kind":"50","justification":"51"},{"messageId":"52","fix":"53","desc":"54"},{"messageId":"55","fix":"56","desc":"57"},{"kind":"50","justification":"51"},"directive","","suggestUnknown",{"range":"58","text":"59"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"58","text":"60"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[473,476],"unknown","never"]